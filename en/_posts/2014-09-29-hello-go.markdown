---
layout: post
title: "Running your Go application on Sailabove"
categories: docker
tags: guide, getting-started, go
lang: en
author: yadutaf
---

[Go](http://golang.org/) is quite recent, modern, high performance langage developped by Google. It emphases on security, performance and concurrent execution. It first ficused on system development like C and C++ while bringing a leaner and richer syntax. In became a prominent technology in just a few months. Before Docker, it was the first langage to bring a solution to the dependency hell as it links statically all its dependencies by default.

To just give a taste of how powerful it is: this is the technology behind Docker itself!

Even though it is still a young project, it already have a [huge standard and contributed library](http://golang.org/pkg/) thanks to its huge community of enthousiast. Moreover, any project, from any standard versioning system (Git, Mercurial, SVN) can be installed as a package, directly from the repo.

Before diving in, make sure to read the [Getting Started](getting-started-with-sailabove-docker.html) guide.

1. Write an awesome application
===============================

Let's do something unique. Like, say, an "Hello Docker" application. In a hurry? You can already see the result on Sailabove: http://hello-go.demo.app.sailabove.io/hello/Docker-Fan

For this example, we'll use the default ``net/http`` package.

Here is the full ``server.go`` source code:

```go
package main

import (
    "net/http"
    "fmt"
    "log"
)

func helloHandler(w http.ResponseWriter, r *http.Request) {
    remPartOfURL := r.URL.Path[len("/hello/"):]
    fmt.Fprintf(w, "Hello <b>%s</b>!", remPartOfURL)
}

func main() {
    http.HandleFunc("/hello/", helloHandler)
    log.Fatal(http.ListenAndServe("0.0.0.0:80", nil))
}
```

All dependencies, even external one, are declared in the ``import`` statement.

2. Dockerize it
===============

Go is a Docker first class citizen. It has its [own dedicated official image](https://registry.hub.docker.com/u/library/go/) supporting Go 1.2 and 1.3. For this example, we'll use the later.

Here is our ``Dockerfile``:

```
FROM golang:1.3-onbuild
EXPOSE 80
CMD [ "/go/bin/app" ]
```

It first instructs Docker to get Go ``1.3`` base image with automatic build support (``-onbuild``). To use Go 1.2 base image instead, you may choose to use ``FROM python:1.2-onbuild`` for instance.

We then declare the ``PORT`` our application will listen on. In our case, standard HTTP port.

Lastly, it instructs Docker the ``CMD`` to launch our application.

OK, let's build and test it locally:


```bash
docker build -t hello-go .
docker run -it --publish 8080:80 --rm -t hello-go
```

Check if all works fine, visit http://localhost:8080/hello/Docker-Fan. You should see womething like "Hello Docker-Fan!".

It works on your dev machine. It will work on production.

3. Go live!
===========

Let's go: ``tag`` our application so that Docker knows where to prod it:

```bash
# docker tag <local app name>  sailabove.io/<user name>/<app name>
docker tag hello-go sailabove.io/demo/hello-go
```

Push your application on Sailabove's *private* Docker registry:

```bash
# docker push <previously created tag>
docker push sailabove.io/demo/hello-go
```

Launch it using previously installed ``sail`` command line and instruct Sailabove to run it with unpriviledged user ``nobody`` for increased security. Please note that, even when running as regular unprivileged user, your application can freely listen on *any* port, ``80`` in this case.

```bash
# sail services add <user name>/<app name> <service name>
sail services add demo/hello-go hello-go --user nobody
```

Eager to see the result? Wait a few seconds. It is now running live on http://hello-go.demo.app.sailabove.io/hello/Docker-Fan. This is ``http://<service name>.<user name>.app.sailabove.io``.

Enjoy!
